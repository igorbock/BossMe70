// <auto-generated />
using System;
using BossME70_API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BossME70_API.Migrations
{
    [DbContext(typeof(BossDbContext))]
    [Migration("20230610184911_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BossME70_Lib.Effects.CompressorEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Attack")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("High")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Level")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Low")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Peak")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sens")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sustain")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Tone")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("compressor_effects", "me70");
                });

            modelBuilder.Entity("BossME70_Lib.Effects.Delay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("ELevel")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Feedback")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Time")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("delay", "me70");
                });

            modelBuilder.Entity("BossME70_Lib.Effects.Modulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("DLevel")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Depth")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ELevel")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Feedback")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Harmony")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Key")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Resonance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Time")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("modulation", "me70");
                });

            modelBuilder.Entity("BossME70_Lib.Effects.NoiseSuppressor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Threshold")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("noise_suppressor", "me70");
                });

            modelBuilder.Entity("BossME70_Lib.Effects.OverdriveDistortion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Drive")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Level")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Tone")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("overdrive_distortion", "me70");
                });

            modelBuilder.Entity("BossME70_Lib.Effects.PedalEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("pedal_effects", "me70");
                });

            modelBuilder.Entity("BossME70_Lib.Effects.Preamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Bass")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Gain")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("High")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("HighMid")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Level")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Low")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("LowMid")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Middle")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Treble")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("preamp", "me70");
                });

            modelBuilder.Entity("BossME70_Lib.Effects.Reverb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("reverb", "me70");
                });

            modelBuilder.Entity("BossME70_Lib.Patch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompressorEffectsId")
                        .HasColumnType("integer");

                    b.Property<int?>("DelayId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModulationId")
                        .HasColumnType("integer");

                    b.Property<int?>("NoiseSuppressorId")
                        .HasColumnType("integer");

                    b.Property<int?>("OverdriveDistortionId")
                        .HasColumnType("integer");

                    b.Property<int?>("PedalEffectsId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreampId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReverbId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("patch", "me70");
                });
#pragma warning restore 612, 618
        }
    }
}
